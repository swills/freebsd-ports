--- gfx/skia/skia/src/core/SkCpu.cpp
+++ gfx/skia/skia/src/core/SkCpu.cpp
@@ -74,6 +74,20 @@
         return features;
     }
 
+#elif defined(SK_CPU_ARM64) && defined(__FreeBSD__)
+    #include <machine/armreg.h>
+
+    static uint32_t read_cpu_features() {
+        uint32_t features = 0;
+        uint64_t id_aa64isar0;
+
+        id_aa64isar0 = READ_SPECIALREG(ID_AA64ISAR0_EL1);
+        if (ID_AA64ISAR0_CRC32(id_aa64isar0) == ID_AA64ISAR0_CRC32_BASE) {
+            features |= SkCpu::CRC32;
+        }
+        return features;
+    }
+
 #elif defined(SK_CPU_ARM64) && __has_include(<sys/auxv.h>)
     #include <sys/auxv.h>
 
--- third_party/rust/libc/src/unix/bsd/freebsdlike/dragonfly/mod.rs
+++ third_party/rust/libc/src/unix/bsd/freebsdlike/dragonfly/mod.rs
@@ -1,3 +1,4 @@
+pub type c_char = i8;
 pub type clock_t = u64;
 pub type ino_t = u64;
 pub type lwpid_t = i32;
--- third_party/rust/libc/src/unix/bsd/freebsdlike/freebsd/aarch64.rs
+++ third_party/rust/libc/src/unix/bsd/freebsdlike/freebsd/aarch64.rs
@@ -1,3 +1,4 @@
+pub type c_char = u8;
 pub type c_long = i64;
 pub type c_ulong = u64;
 pub type time_t = i64;
--- third_party/rust/libc/src/unix/bsd/freebsdlike/freebsd/x86.rs
+++ third_party/rust/libc/src/unix/bsd/freebsdlike/freebsd/x86.rs
@@ -1,3 +1,4 @@
+pub type c_char = i8;
 pub type c_long = i32;
 pub type c_ulong = u32;
 pub type time_t = i32;
--- third_party/rust/libc/src/unix/bsd/freebsdlike/freebsd/x86_64.rs
+++ third_party/rust/libc/src/unix/bsd/freebsdlike/freebsd/x86_64.rs
@@ -1,3 +1,4 @@
+pub type c_char = i8;
 pub type c_long = i64;
 pub type c_ulong = u64;
 pub type time_t = i64;
--- third_party/rust/libc/src/unix/bsd/freebsdlike/mod.rs
+++ third_party/rust/libc/src/unix/bsd/freebsdlike/mod.rs
@@ -1,4 +1,3 @@
-pub type c_char = i8;
 pub type dev_t = u32;
 pub type mode_t = u16;
 pub type pthread_attr_t = *mut ::c_void;
@@ -84,7 +83,10 @@ s! {
 
     pub struct stack_t {
         // In FreeBSD 11 and later, ss_sp is actually a void*
+        #[cfg(not(target_arch = "aarch64"))]
         pub ss_sp: *mut ::c_char,
+        #[cfg(target_arch = "aarch64")]
+        pub ss_sp: *mut ::c_void,
         pub ss_size: ::size_t,
         pub ss_flags: ::c_int,
     }
